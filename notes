# React

React is a library not framework

React is component based
Declarative
State-driven

React uses:
Virtual DOM
Fiber tree
One way data flow

Useful extensions: ESLint, Material icon theme, ES7+ React/Redux/React-Native snippets, One monokai theme.

All assets should be in 'public' folder cos webapack automatically gets it from there
#36

A Component has a Data, Logic, and Appeareance.
JSX combines html, css and javascript.

Separation of concerns: it used to be one technology/file. Its now component/file.

State is internal data that can be updated by the components
Props is external data that can only be updated by the parent component

# A component should not mutate a data coming from outside of it.

React uses one-way data flow. data can only flow from parent to children and not the other way.

When using conditional rendering, always use a boolean variable and not a truthy/falsy variable.

We can't use if/else in jsx, cos we need to use syntaxes that produce a result/data, if/else doesn't.

Use the tenary operator when you want to return a jsx based on a condition

A react fragment lets us group some elements without leaving any trace in the DOM tree. <></>
We can use <React.Fragment key={id}></React.Fragmrnt> if you need to pass a key

State allows developers to:

1. Update the component's view (by re-rendering it)
2. Persist local variables between renders

NB: react hooks can only be used in the top level scope of the react tree.

install chrome react devtools
#64, 2:25

We use 'controlled elements' approach to handle our forms in react.
In this approach, it is React that controls the form rather than the DOM.
We follow 3 basic steps for this:
`We create a state
`Assign each state to the form data to be monitored as its value,
`include an onchange to monitor change

State is more like the components memory (way of persisiting data)
Props is external data from a parent component

# THINKING IN REACT:

$ Break UI into components and establish connection
$ Build a static version in react (without state)
$* Think about state: when to use it, local vs global states, where to place each piece of state
$\* Establish data flow: One-way data flow, chil-parent, accessing global state
[The steps with asterisks are what constitute state management]

# State management:

is deciding when to create pieces of state, what types of state are ncecssary, where to place them and how data flows. => Giving each piece of state a HOME.

#80
We practicalized "lifting up state".
React has a one-way flow of data but if a state lives in a component and is needed in a sibling component, then we
need to lift the state up to the nearest parent, if the state needs to then be updated by its initial owner component then we can use a 'child-to-parent' communication by using a fn that houses the state's fn and is passed as props and is updated from its child.

Deriving state: deriving data from a state instead of creating multiple states. This makes us have a single source
of truth whilst ensuring our data is in sync. We use regular variables for this.

An early return might be a good case scenario in some use cases

Children props refers to everything in-between an opening and closing tag of a jsx component.

#91
When we have to pass down props through sveral components, thats prop-filling and it can become an issue we must fix.

When you have a form, its better to have your handleSubmitFn inside the same component with the form, then you can add anyother external fn as a props (usually from the parent).
But for other stuffs, jonas's convention is to decalre the fn in the parent and pass 'em as a
props to the component that needs it.

#105

COURSE SECOND PHASE:
How to think about components, Composition, Reusablilty, How to split a component, Building layouts.

# How to split a UI into components:

- Logical separation of content/layout
- Reusability
- Responsibilities/Complexity
- Personal coding style

* If youre unsure, You can start with a big component and then split as needed while building your app
  NB: Creating new components causes abstraction which requires more mental energy top go back and forth so dont create new components too early,
  Never create a component inside another component !!!

  # Component Categories:

  Stateless/Presentational: recieves and presents data
  Stateful: has state
  Structural: Usually the pages, layout or screen of the app. (result of composition)

# Component composition (a solution to prop drilling)

is making components reusable by passing other components into them as children rather than binding them directly. We say we compose them together. :)
Jonas version: combining different components usingthe children prop (or explicitely defined props)

- We use component composition when we want to:

1. create highly reusable/flexible component 2. fix prop drilling (great for layouts)
   NB: We can also pass elements as props an alternative to children

#115
We can set a default value on a prop incase we dont pass it in.

Building the reusable star component is a great experience 🎉🚀 !!!

prop-types is a package that comes with the react folder and is used to set prop types,
[use typescript instead though]

# PROPS AS A COMPONENT API:

Component consumer <================================= Component creator
#121

# HOW REACT WORKS BEHIND THE SCENE:

Component vs Instance vs Element

Component:

- description of a piece of UI,
  -a fn that returns React elements (element tree) in jsx,
  -Blueprint/Template.

Instance:

- are created when we use components,
  -actual manifestation of a component
- has its own state and props
- has a lifecycle (can be born, live and die)

Element:

- a component instance returns a React Element
- contains all the info necessary to craete DOM elements

DOM Element (HTML):

- actual visual representation of the component instance in the browser

# HOW RENDERING WORKS:

how does react convert react element to dom element rendered on the screen.
Render phase => Commit phase.

A render is triggered in 2 phase: Initial phase, when State is updated.

# NOTE:

Re-rendering doesnt mean updating th entire DOM but it means calling the component and replacing the changes made to it, (or we can say its the virtual DOM thats re-created).

- Rendering a component will cause all of its child components to be rendered as well

The "Virtual DOM" is a tree of all the elements created from all the instances in the component tree.

Fiber is a reconciller in the react engine that updates the fiber tree.
Reconciliation decides which DOM elements need to be inserted, updated or deleted
Fiber tree is an internal tree (in form of a linked list) that has a 'fiber' for each component instance and DOM element.
The process of reconciliation is called 'diffing'

React Libarary is not the one responsible for writing to the DOM, cos react was made to be used for many hosts which the DOM is just one of. ReactDOM does the writing to the DOM.

Render phase is asynchronous but commit phase is synchronous

# Fiber tree

is created upon the initial render of a react app and are not recreated upon re-render, instead it updates with changes and controlls the updates on the actual DOM.
works asynchronoously

# How diffing works:

2 case scenarios:

1. Same position, different element:
   React assumes entire sub tree is no longer valid and removes old components from the DOM with their states
2. Same position, Same element:
   everything stays same and new props/attributes are passed if they change btw renders but sometimes we dont want that so we can use the key props cos the key prop is a special prop that we use to tell the diffing algorithim that an element is unique...
   so when a key changes btw renders, the element is destroyed and a new one is made in its place.

# So we use keys: in lists, to reset state. ALWAYS USE KEYS !!!

# Rules for render :

2 types of logics in react:

- Render logic: usually code that lives at the top level of the component fn and participates in describing how the component looks like.

- Event handler fns:
  fns executed as a consequence of the event that the handler is listening for,
  its the code that actually does things, update state, perform http request, navigate to another page, etc.

  FUNCTIONAL PROGRAMMING PRINCIPLES:
  Side effect: modification of data outside the fn scope, an outisde variable mutation.
  Pure fns: fns without side effects, does not change any variable outside the scope.

  # Rules of what to not do in a render logic (render logic must produce no side effect):

  Do not perform network requests (API calls)
  Do not start timers
  Do not directly use the DOM API
  Do not mutate objects/variables that are outside the fn scope
  Do not update state (or refs) [creates an infinite loop]

  # However side effects are allowed in eventhandler fns, we also have a special hook(useEffect)

# Note that state updates in a fn in react are batched, i.e all the code inside are ran and creates a new state that is batched together before it goes to the render and commit phase. So updated state variables are not immediately available after setState call, but only after the re-render.

After seeing some shege, i need to concur with jonas that useEffect is usuualy used as a synchronizing hook. (map lat&long incase you remember😅)

BATCHING IS A PRETTY IMPORTANT TERMINOLOGY IN REACT

Stale state is when our state has not been updated but still contains the current state after changing it, this occurs between the updating and rerendering phase.

React 17 only allowed batching in event handlers but React 18 made batching possible in timeouts, promises and native events

We can opt-out of automatic batching by wrapping a state update in ReactDOM.flushSync().

# How event works in React:

Event propagation and delegation (vanilla js):
capturing phase ===> bubbling phase.
Event delegation is handling events for multiple elements centrally in one single element.

In react, all event handles are registered on the rootDOM container, this is where all events are handled. So React performs event delegation for all our events in our apps.
Note that in event handling, its the DOM tree that matters not the component tree

For events, React uses synthetic events so that events work same across all browsers, it is very similar to the native DOM event object and has all the important methods.
Not so important tip: You can attach 'capture' if you need to handle an event during the capture phase. e.g onClickCapture.

# Libraries vs Framework & the react ecosystem:

Framework is like an "all-in-one" kit for a sushi meal, i.e it includes everything you need to build your apps e.g: angular, svelte.

Libraries is like using the "separate ingredients" approach, choosing everything you want to use yourself. e.g REACT. allows the use of external libraries. This means FREEDOM 🚀

# React has a rich ecosystem:

Routing (for SPAs) => Raect router
HTTP requests => javascript fetch, axios
Remote state management => React Query, React router(doesnt persist state but also useful)
Global state management => Context API, Redux
Styling => CSS modules, styled components, tailwindcss
Form managment => React Hook Form, Formik
Animation => Motion
UI Components => Chakra

Opinionated React frameworks: they each have selected tools to take care of the above services (so you dont need to worry about teh stress of selecting what to use), they are:
NEXT.js, Remix, Gatsby.
Some of this opinionated frameowrks have additional features such as server-side rendering, static site generation.

# Component Lifecycle:

Mount/Initial render => Re-render (state/props/context\* changes, parent rerenders) => Unmount (component instance is destroyed and removed, state and props are destroyed).

Side effects are made in eventhandlers (more recommended) and effects, effects allow us to write code that will run at diiferent moments: mount, re-render, or unmount.

UseEffect has 3 parts: the code to be ran, a cleanup fn which runs before the component unmounts, and the dependency array.

# The useEffect dependency array:

Each time one of the dependencies changes, the effect will be executed again.
Every state or prop used inside the effect MUST be included in the dependency array, otherwise we get a 'stale closure'

if we dont pass a dependency array, the effect runs on every render

UseEffect are like event listeners listening for one dependency to change, whenever a dependency changes, it will execute the effect again.
UseEffect is a *synchronization mechanism and is deeply connected with the *component lifecycle.

# UseEffects are executed after the component are rendered and the browser has been painted.

So if an effect sets state, an additional render will be required. so dont overuse useEffect !!
Another type of effect is the layout effect and it runs before the browser paint but its not an important effect so never mind.

#154

# The UseEffect cleanup function:

is a fn that we can return from an effect
Runs on 2 occasions: Before the effect is executed again and after the component has unmounted.
A clean up fn is necessary whenever the (result of the) side effect keeps persisting (which is usually the case) after the component has been re-rendered or unmounted\*. Example: http request ->cancel, start timer->stop, add event listener -> remove.

NB: Use different useEffect for different tasks, so its easy to understand and clean up.
A closure in javascript implies that javascript will always remember a variable at the time and place it was created, explains why we can use variables in our useeffect fn inside the cleanup fn.

Might sound obvious but, always clean up your data fetch to avoid race condition issues

#159
Hooks...

# React Hooks:

are special built-in fns that allows us to "hook" into React internals.
Some useful ones are: useState, useEffect, useReducer, useContext, useRef, useCallback, useMemo, useTransition, useDeferredValue.

# Rules of hooks:

Only call hooks at the top level (not in conditionals, loops, nested fns, or after an early return) = to ensure that hooks are called in the same order, they are saved using an index order .

Only call hooks from React fns (a fn component, custom hook).

Initializing/setting an hook only matters/runs on the initial render.

State updating is asynchronous so we cannot access it immediately after setting it, until after the code runs and the view rerender. That point where we cant access the state data yet is called "stale state".

# Whenever the initial useState value depends on some computation, always pass in a fn rather than calling a fn

# useState summary:

While creating a state, we can use the normal way or use "lazy evaluation" by using a fn.
The fn condition: must be pure, must accept no arguments.
While updating state: simple or based on current state

# useRef

an object with a mutable '.current' property that is persisted across renders.
2 use cases:
*Creating a variable (persist data) that stays same btw renders
*Selecting and storing DOM elements✔

# Refs are for data that is NOT rendered. usually appears in event handlers or effects, not in JSX (use state instead). ALSO DO NOT READ/WRITE .current in render logic.

# STATE VS REFS:

state updates across re-renders, refs do not.
state are immutable, refs are mutable.
state updates are asynchronous, refs are synchronous

#167

# Custom Hooks:

We can reuse 2 things in React. Ui (using component) or Logic (does logic contain hooks ? regular fn : custom hook).

Custom hook allows us to:
Reuse non-visual logic in multiple component
One custom hook should have one purpose (to make it reusable)
Rules of hooks still apply

Unlike components (only recieves props and returns JSX), custom hooks allow us to pass or return any relevant data.

# The difference btw custom hooks and regular fns is that custom hooks uses one or more hooks

The name of a custom hook need to begin with "use" else react willl see it as a regular fn
Not related but its good to know that fn declarations are hoisted, i.e can be used before declaration.

# Class components:

Works in a bit different way with more boiler code.

# NB:

functions when outside the render method, they loose thier binding to the this keyword of the class instance so we need to manually bind them in the constructor
We modify our state by using a setState() method
Always reduce the render logic inside the render method to the bearest minimum.
We can remove boiler code with the class field features (means declaring variables outside of the constructor instead)

We can use arrow fns to avoid having to manually bind the fns to the this keyword of the class instance. bcos arrow fns dont have thier own this keyword an djust takes from its surrounding.

# Functional Components vs Class components:

Class components take the OOP approach and has explicit lifecycle methods that make the lifecycle easier to flow with, fn components usually handles life cycl ish using the useeffect hook.
HOOKS ARE THE BIG DIFFERENCE.
fn component uses useState, class uses this.setState()...

# Life cycle methods:

3 => mounting - componentDidMount, re-rendering - componentDidUpdate, unmounting - componentWillUnmount.

SECTION 3 || ADVANCED REACT

# useReducer hook:

A more advanced way of managing state
Important to understand Redux
Properties: the state, reducer fn(state, action), dispatch.

We can pass anything in the dispatch method but its a nice convention to pass an object with type and payload keys with thier values.

It is common to use a switch inside of a reducer fn

#149

Why use useReducer?
useState is not enough in certain situations, when componenets have a lot of state variables and state updates.when multiple state updates need to update at the same time.

using state with useReducer:
An alternative way of setting state, ideal for complex state and related pieces of state.

# useReducer vs useState:

useState is good for single independent pieces of state
logic is spread all over one or multiple components

useReducer is for multiple related pieces of state
logic is in one central place, the reducer
declarative state component

# Steps to use eslint in project

Install eslint, vite-plugin-eslint, and eslint-config-react-app as dev dependencies,
create an .eslintrc.json file to use eslint in react
import and include eslint in vite config file

# Styling in React

CSS modules are a good use cos global css files are a nightmare cos of nonspecifity in large react apps.

we use the global psuedo selector when we have classes provided by a package manager or library to make the style we apply to that class generic across css modules and so that it works well with the class provided by the library e.g leaflet, react-router navLink.

(i think i used css modules in world wise app, not sure)

CSS-in-JS is also a good option (e.g Tailwind)
Another option is UI libraries like MUI, Chakra, Mantine

# Routing

We use it to match different URLs to different UI views (components) - React Router
Routing is used in SPAs.
The Page is never reloaded!

NavLink makes it easy to style a selected nav list by adding an active class on the selected one.

Nested routing is when an element (in a part of a component) has a link that leads to a route that changes what appears in a part of the view.

Outlet is used to display the component of a nested route.
Index is used to set a default route.

In the worldwise app, We manage active tab using routing, a different approach to using the useState hook.

#213, 10:00

# URL for state management in routing: (Dynamic Routes with URL Parameters)

the url is a good place to store UI state and an alternative to useState in some situations. Example:open/closed panels, currently selected list item, list sorting order, applied list filters.

Benefits:
easy way to store state in a global place
good way to pass data from one page to another
makes it easy to bookmark and share the page with the exact UI state it had at that time

We use params and query string to store data in the url.

#216 4:50
We use useParams from react-router-dom to access the params from the URL and useSearchParams for the query/ies.

we use the name of the query to get the data assigned to it from the url

# Programmatic navigation with useNavigate:

We use useNavigate to move to any route without having to use a link
We also use the useNavigate to move a number of steps back/forward on our page. like navigate(-1) (imperative),

Tip: when you use a stroke before your route, it automatically adds the root route, if not, it continues it from the current route

React provides us with a Navigate component that we use to redirect our urls. <Navigate/> (declarative)
We should add the replace attr in this component cos the url redirected to replaces the old url in the history stack.

# Context API:

allows to passdata through the app without manually passing props by allowing to use global state in the entire app.
We have a Provider, value, consumers.

STEPS:

1. create context,
2. provide value to components by wrapping them in the context provider. (NB: only components wrapped in the provider can use the context data)
3. access needed data from the context

Tip: Every function or parameter that updates the API or is used generally should live in the contextAPI.

ContextAPI + useReducer is a great combo you should get comfortable with. 👩‍🏫

#225
In the atomic blog, we created hooks for the each of the data we are getting from the contextAPI, to avoid unnecesarry repetition.

Nice convention to use the contextAPI:
create a file for the contextAPI,
create a context,
write a function that contains all the data needed, return the context provider that takes the needed value and wraps around the children prop.
write a custom hook that returns the data so we dont have to repeat using the context hook in our components
export the function and the custom hook, then use them in the components needed by wrapping the components that need the data inisde the function (which acts as a component) exported from the context file.

# Advanced State management:

Types of state:
State Accessibility: Local State vs Global State.

State Domain: Remote state vs UI state.

Remote:
all application data loaded from a remote server (API).
Usually async
Needs re-fetching + updating

UI state:
is all other state 😅
usually sync and stored in the app

(See screenshot for State Placement Options)

NB: I'm using react-query for wild-oasis and we used react-toolkit-query for rapha. Both remote states are cool though but RTK is more complex to setup but comes with the benefit of react-redux for global local state on the side.

#234 16:00

How authentication works in Applications:
We get the user email and password from a form and check their credentials against an API, if correct, we redirect them to our main app.
Upon logging in, We also store the user details in our app and a state to monitor whether he's logged in or not, so we can protect our app from unauthorized access.

#239 08:00
For the third step of authentication, create a component that displays the app as children if the user is authenticated or navigates to home otherwise.

# Performance Optimization:

1. Prevent wasted renders: memo, useMemo, useCallback, passing elements as children
2. Improve app speed/ responsiveness: useMemo, useCallback, useTransition
3. Reduce bundle size: use fewer 3rd party libraries, code splitting, lazy loading

wasted render is a render that doesn't produce any change in the DOM.

See screenshot on when component re-renders and wasted renders

A solution to wasted re-render is to make components that do not depend on its parent state as children.

# Memoization:

is an optimization technique that executes a pure function once and saves the result in memory.
if we try to execute the fn again with the same arg. as before, the previously saved result will be returned, without executing the fn again.

We use this technique to optimize our react app. we memoize components with memo, objects with useMemo and fns with useCallback.

NB: react guarantees that state data is stable so we dont need to bother bout them when implementing memoization

Another optimization technique is to place fns that are not reactive outside of the componenet if possible

memo fn: is used to $create a component$ that will not re-render when its parent re-renders, as long as the props stay the same between renders. It only affects props!.

Only use in large apps that have frequent re-renders or when the props in your child component are not changing so that even if the parent re-renders, the child isnt re-rendered too since its props are not changing.

If we pass an object/fn as props, the memo fn doesnt work well cos every object is unique even if it has the same value, so the object is seen as a new props on every render so the memo simply doesnt work. the solution is to also memoize the object/fn by using useMemo (for any value to be preserved) or useCallback (for fns).

3 big use cases of useMemo & useCallback:

1. Memoizing props to prevent wasted renders (together with memo)
2. Memoizing values to prevent expensive re-calculations on every render
3. Memoizing values that are used in dependency array of another hook ✔

the dependency array of useMemo contains variables that would make the function/object/variable to be re-calculated

useCallback is used to memoize a fn, useMemo is used to memoize a value, like an object or a computed value

# Only optimize context if these 3 are true:

State in context needs to change all the time
Context have many consumers
if the app is slow

Tips for optimization:
Use the children prop to pass children of a component, so they dont always re-render when the parent state that they do not consume changes, an alternative is to memoize the children component if directly added to the parent

Its a good practise to craete one context per data, cos when one value of the context changes, the whole context is re-rendered and every component consuming it is re-rendered too

Bundle and Code splitting:
When we build our project, its built all at once, the bigger the project, the more time it takes.
We can optimize the build by implementing lazyloading that builds the project in chunks, depending on how each page is called/needed.

See how we implemented lazyloading in the worldwise App.
(After putting our import inside the lazy method, we then use the suspense API provided by react to implement an action(spinner) pending the time our (build) page loads)

useEffect dependency array rules: check screenshot
remove unnecessary dependencies: check screenshot

when not to use an effect: check screenshot

we can use useEffect when we need to update a state that depends on a lot of other states, the downside is that useEffect triggers 2 renders instead of one, thats bcos useEffect runs after a page has been rendered...

NB: Be mindful of whatever you put inside a useEffect

Remember closures?
Closure is when a fn captures all the variables from its lexical scope, from where it was defined at the point that the fn was created. i.e the fn always has access to all the variables from the place where it was defined.

In react, hooks heavily rely on the concept of closures and this is specially true for useEffect

Any fn that was created at the initial render and never again (is a stale closure cos its not updated), can be referred to as a snapshot and gets access to its initial state and variables. So

# REDUX

3rd party library to manage global state
All global state is stored in ine globally accessible store and updated using actions

2 versions: 1. Classic redux, 2. Modern Redux Toolkit

We learn 1 first, then the second

Redux is perfect to manage a lot of non remote global state.
For remote global state, use something like React Query.

See use case of redux in screenshot.

# redux is Similar to useReducer except that it uses a store as a source of truth and uses an action creator fn to automate writing action which is helpful to keep all possible actions in one central place (A convention, not a must)

Event handler => Action creator fn => dispatch => store => next state => re-render component.
The goal is to make update logic spearate from the rest of the application

Action creators are not mandatory nor a part of redux but just a nice approach
use in redux and it involves creating fns to manipulate reducer data, rather than always writing the dispatch with the objects, we just call the fn when and where needed.

Remember to always keep business logic inside the reducer fn except it is a side effect then maybe put inside the dipatch fn.

#262
Steps to use redux:
Prepare reducer fn,
initialize store,
create action creators/providers
dispatch action creators to manipulate reducer state data

# NB's:

- create a reducer fn for each separate data group.
- We dont dispatch actions directly to the reducer but we dispatch actions to the store
- If we have more than one reducers, then we combine the reducers in a rootReducer using a redux method
- Use 'Features' to arrange files structure, then create a slice for each feature. each slice contains the initialState, reducer and action creators of the data.
- Then all slices are imported and saved to the store,
- finally this store is exported and used to dispatch actions throughout our app.
- We can only use redux in react by using the react-redux package

Using redux in react app is similar to the contextAPI approach, by wrapping components in a provider component provided by react-redux.
We use the dispatch method provided by react-redux to modify data in our store and the action providers to dispatch the actions

#269
Before react-redux's modern hooks, we connect our redux to our react application using the connectAPI.
To use the connectAPI, we create a fn to map the state we take from redux and map it to the props of the component where we want to use the redux data

# Redux Middleware (Thunks):

We cannot make async fns inside our reducer fns cos reducers need to be pure fns, so we can use redux middlewares for this

Redux Middleware is run after a dispatch but before the action is executed in the reducer, this makes the perfect time to add impure fns like async fns, API calls, timers, logging, also side effects. etc.

Steps to use middleware:
Install package => Apply middleware to store => Use middleware in our action creators fn.

To use thunk in action creator: return a fn that contains the logic and dispatches an action.

# Modern way of writing redux. (Redux Toolkit):

Modern and preferred way of writing redux.
Makes us use best practices.

Advantages:

1. We can write code that mutates state inside reducers (will be converted to immutable logic behind the scene).
2. Action creators are automatically created
3. Automatic setup of thunk middleware and Devtools

package: @reduxjs/toolkit

#275 13:00

redux-toolkit composes action names from the name of the slice and the action name

in redux-toolkit, By default the action is set to take only one parameter, we can configure it to our taste using the prepare method in the action fn

In redux-toolkit, the first parameter in an action is the state, the second is what we pass into the action fn when we dispatch it, if we pass more than one value, we need to use the prepare method to modify our (payload) data.

# Using thunks in redux-toolkit:

Thunk is a middleware that sits between the dispatching and the reducer itself, it is used to do somthing to the dispatch action before updating the store.

A good case to use thunks is when we have an async fn we need to use in our redux and as we know, redux is synchronous by nature so we need to use thunk to manipulate this.

Its way easier to use the action provider approach we learnt before to implement thunks than using the async method provided by redux-toolkit.

# ContextAPI + useReducer vs Redux:

ContextAPI + useReducer: use in small apps
Easy to setup
additional state 'slide' requires new context setup from scratch

Redux: use in large apps
3rd party
takes up more bundle size

(See screenshot for more details)

Jonas Useful React Resorces:
https://www.udemy.com/course/the-ultimate-react-course/learn/lecture/37352508#reviews

Tips: (see eslint packages and file in fluffy-snacks project)
Install eslint configs in your react project.
Configure "eslint" in your project.

# APPLICATION PLANNING:

Big Project: (rough sketch)

1. Gather app requirement and features
2. Divide app into pages:
   think bout overall and page-level UI
   Break into components
   design and build a static version(no state yet)

3. Divide app into feature categories:
   think bout state management + data flow
4. Decide what libraries to use (tech decisions)

Get the Project Requirements from the business. (see screenshot for fluffy-snacks own).
Derive feature category from project requirement, then you can derive pages and state slices from features. (see screenshot)

# Professional File Structure: (Feature-based structure is best for big projects)

features for each feature with their state slice,
services: reusable code to interact with an API,
ui: reusable components like btns,
utils: pure reusable helper fns.

We can use the react-router in a different way: by using the "createBrowserRouter" (imperative way - better) instead of BrowserRouter.

This method: createBrowserRouter, is necessary to enable data-fetching/data-loading in react-router. how? => Each route can define a "loader" function to provide data to the route element before it renders

Its a nice convention to write the loader fn inside the component that would use it but we can put it anywhere. After writing the loader fn and config it in the browserRouter, we use the useLoaderData hook to access it.

The approach that the react-router uses for data-fetching is called: render-as-you-fetch.

We can get the loading state of our pages using the useNavigation hook which tracks a genenric loading state for our app, for any of our pages at all.

# Loading in react router:

we use the loader to simulate a loading condition for every data that is needed by the component, we fetch/call the data inisde the loader fn for the component and the data is collected as soon as the component is loaded.

PS: we get a generic loading state (from react-router useNavigation hook) for our components that we can use to make a nice loader when any component is loading.

# Handling errors in react router:

Just like the loading state, we can handle any error that occurs at any point of our app, cos our errors from the children component bubbles up to their parent, so we can handle it there by accessing the error message using a react-router hook. We can also handle the error in the component instead.

# Using useParams hook in react router loader fn:

cos we can only use hooks inside of components, we cannot use hooks inisde of ordinary functions, react router provides the params value as one of the data accessible by the loader fn as props.

# Writing data with react router "actions" (& react router forms)

Like the loader are used to read data, actions are used to write data. i.e to manage remote server state. the implementation is similar as using loader to get data. We create an action fn that recieves our formInputs and is ran when we submit our form.

NB: react router uses the nearest route when submitting the form
Also note that we did not need things like setting states for our form inputs or even an onClick fn to submit the form and so on...

To redirect to a route from the action fn, react-router provides a redirect method cos as we know, we cannot use an hook inside of an ordinary function

<!-- 06:53 -->

# Quick tailwind tips:

In responsiveness, a breakpoint applied moves from the set breakpoint upward, sm moves from 640px upward and a default styling would be from 0px upward or to 640px if an sm breakpoint is set on the same style.

#304
We can use the @apply to write styles that we can reuse across our app but this should only be done when its a necessity cos it nullfies the essence of tailiwind so instead we should use reusable components in this cases.

Tailwind allows us to use its defined stylings inside the @apply method in our css file.

useful resource => https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje

In the tailwind config, anything we place inside the theme overides tailwind default values, so we should put them in the extend object to actually make it as an extension of what we have.

We discussed a lil bit bout tailwind configuration and using the extend property. to add/set more styles.

Some tailwind classes:
space-x: to add space between the children of a parent element,
divide-y: to add lines between the children of a parent element,

# Recap to using Redux:

create a store,
create slices connected to that store,
create and export your actions from the slice

connect redux to your react app using the Provider component to wrap your entire app and pass the store as a prop in it, this component is gotten from the react-redux package

To use our actions in the components we need them in, we need to dispatch them using the useDispatch hook.

#315
Its a nice practice convention to abstract and place useSelector's callback fn in its slice file and export the callback fn so we have one central place for deriving those data.

Its also a nice convention to start the name of these callback fns with "get..."

We can reuse actions in other actions by calling them from the caseReducers method. (See fast-pizza app, cartSlice.ts, line 41)

To perform actions like clearing the cart upon submission of a form, we need an hakc since we cant just use hooks in pure fns. so what we do is import the whole store and use the dispatch hook to call the clearCart action.

# modern approach to use thunk in redux:

- create a fn with the createAsyncThunk hook, first parameter is action type name, second is the thunk fn which is usually async (reason why we use thunk in the first place anyway).
- after writing the fn, (note that the return data is the payload of the fulfilled state of the thunk fn)
- add fns to the "extraReducer" method in the userSlice config, these fns (usually 3) would handle the 3 case scenarios: [pending, fulfllled, failed] of the intended thunk fn.

# Fetching data without navigation: useFetcher

Normally react-router gives us the feature to fetch data automatically when we load a page as we have seen, but if we want to load any data manually on any component, we can use "useFetcher"

(is used to fetch a data to a component without autoloading the page as we've been doing)

this method: fetcher.load('/menu') fetches the data that loads when the "menu" route is normally ran.

# Updating data without navigation: useFetcher

We also use the useFetcher here, works like a normal react-router action fn, except that we need to wrap the div in a special form "fetcher.Form"

Note that even if the form we want to update is a child component of the component we are connecting the action fn to, it still works perfectly fine.

Revalidation is a cool feature that helps us. it is how react knows that something has changed when we update our data with an api like a patch or put. React notes this change and reloads the page to update itself with the new data.

# NB:

"PUT" method takes in a whole new data to replace the old one, "PATCH" takes only a part of the data to be updated

# Styled Components:

Uses template literals to create styles for a component so we can reuse that componnet with the set style.

To use a global style, it should be a sibling to every component that should take its styling and it doesnt take any child

Styled components can take props to set styles for differeent types of a component. We can also use the "as" props to set the element type of a component.

# Supabase: backend as a service (uses postgres db, doesnt matter though)

Includes user auth and file storage
Modeling state: we derive/set our states based on the features/page level. (see screenshot, couldnt take shot. video no 339, min - 2:55)

RLS:
Row Level Security

We need to adjust our RLS policy so we can recieve the response data from our APIs.

# Connecting Supabase with React app:

Install supbase-api library - see supabase doc.

Setup storage buckets to store large files mostly like images and so on.

# React Query: (jonas's fav react library 😍)

Remote state management
takes over data fetching and management

some good news bout RQ:
-all data fetched is stored in a cache.
-automatic loading & error states.
-automatic refetching to keep state synched (react query syncs db data by refetching the data after a certain timeout or after we leave the browser window and come back to it). (we can set a staletime)

- Prefetching data (like incase of pagination)
- Offline support

Its nice if you can use react query devtools to monitor states in the cache

useQuery to fetch
useMutation to edit/delete

NB: the mutation fn can only accept one argument !, so you might want to pass in an object instead

# React hot toast - for notifications

# React hook form - for forms

RHF is very effective for handling form errors and validation.

We also learnt to upload image urls to the supabase bucket storage

# Advanced React patterns - for senior react devs 😎

Render props = to control component render by passing the data and a fn that tells the component what to render (render needs to always be a fn)

# Higher order components - cool pattern

is when we incorporate a component into another component to create an enhanced component. its a convention to name your HOC with the prefix "with-"

Compound components = for self contained components that wants to manage their own state, usually combines small chunks of components to form a super component (this approach avoids prop explosion (too many props) and makes our elements flexible to use).

This approaches uses context(API), steps are:

1. Create a context
2. Create parent component
3. Create child components to help implementing common task
4. Add child component as properties to parent component

# React Portal:

A portal only changes the physical placement of the DOM node. The component is still at the same place on the component tree, only its position on the dom tree is changed. So every prop passed to it is still recieved correctly.

React Portal is useful to avoid conflict with the css property overflow when we use the component in several places.
Making sure that our component is never cut off by an overflow property.

React portal is also useful if our component is floating or appearing on top of our view or other components.

We want the modal to manage all its state internally so we use a compound component for that.

# Clone element:

allows us to craete a new React element using another element as a starting point,
useful; for when we want to add an event listener on a children prop (see wild-oasis, modal-v1.jsx).

# NB: remember bubbling and captuiring phase in javascript?, read up.!

adding "true" as a 3rd parameter in an event listener means that the event should run in event capturing phase rather than the default bubbling phase (moving up). This is sometimes useful like in our case in wild oasis. (Window component in Modal-v1).

# Client Side filtering:

We implemented sorting, filtering and pagination in wild oasis.

# Pre-Fetching with React Query:

fetching data that we might need before its requested for, can be useful when we implement server side pagination for better UX.

About using folder structure rules:
Dont fetch any data in pages, instead fetch them in your features folder and then render them in your page component

In a useMutation, the onSuccess option gets access to the result from the mutationFn.
Invalidate your queries on a successfull mutation fn

Note that we can also use the onSuccess/error as an option parameter on the mutate fn.

Allow only authenticated users to login, and only authorized users to access certain routes.

# Authentication & Authorization (access to route) Process:

Routes are protected, then...
We first check if session exists in localStorage, then if it does exist, we check and fetch the user details to login and create a session for him.

We can manually set some data into react query cache, to skip refetching in some instances like logging in an auth user. see useLogin.ts file (wild oasis)

Its a good practice to remove all query cache when logging out

# Look at "SignupForm" in wild-oasis for react-hook-form validation options.

keywords: register, required, pattern, minLength.
